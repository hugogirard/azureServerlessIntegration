{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Retrieve_customer": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "databaseId": "contoso",
                        "containerId": "customer",
                        "itemId": "@triggerBody()?['customerId']",
                        "partitionKey": "@triggerBody()?['customerId']"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "AzureCosmosDB",
                        "operationId": "ReadDocument",
                        "serviceProviderId": "/serviceProviders/AzureCosmosDB"
                    }
                },
                "runAfter": {
                    "Initialize_variable_order": [
                        "Succeeded"
                    ]
                }
            },
            "Validate_if_customer_exists": {
                "type": "If",
                "expression": {
                    "and": [
                        {
                            "equals": [
                                "@outputs('Retrieve_customer')?['statusCode']",
                                404
                            ]
                        }
                    ]
                },
                "actions": {
                    "Send_customer_not_found": {
                        "type": "Response",
                        "kind": "http",
                        "inputs": {
                            "statusCode": 404,
                            "body": "Customer @{triggerBody()?['customerId']} is not found"
                        },
                        "runAfter": {}
                    }
                },
                "runAfter": {
                    "Retrieve_customer": [
                        "Succeeded"
                    ]
                },
                "else": {
                    "actions": {
                        "Generate_Order_ID_": {
                            "type": "Compose",
                            "inputs": "@guid()",
                            "runAfter": {}
                        },
                        "Response": {
                            "type": "Response",
                            "kind": "http",
                            "inputs": {
                                "statusCode": 200,
                                "body": "@variables('order')"
                            },
                            "runAfter": {
                                "Create_order": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Set_variable_order": {
                            "type": "SetVariable",
                            "inputs": {
                                "name": "order",
                                "value": {
                                    "id": "@outputs('Generate_Order_ID_')",
                                    "customerId": "@triggerBody()?['customerId']",
                                    "status": "In Progress",
                                    "orderItems": "@triggerBody()?['orderItems']"
                                }
                            },
                            "runAfter": {
                                "Generate_Order_ID_": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Send_message": {
                            "type": "ServiceProvider",
                            "inputs": {
                                "parameters": {
                                    "entityName": "order",
                                    "message": {
                                        "contentData": "@variables('order')"
                                    }
                                },
                                "serviceProviderConfiguration": {
                                    "connectionName": "serviceBus",
                                    "operationId": "sendMessage",
                                    "serviceProviderId": "/serviceProviders/serviceBus"
                                }
                            },
                            "runAfter": {
                                "Set_variable_order": [
                                    "Succeeded"
                                ]
                            }
                        },
                        "Create_order": {
                            "type": "ServiceProvider",
                            "inputs": {
                                "parameters": {
                                    "databaseId": "contoso",
                                    "containerId": "order",
                                    "item": "@variables('order')",
                                    "partitionKey": "@outputs('Generate_Order_ID_')",
                                    "isUpsert": true
                                },
                                "serviceProviderConfiguration": {
                                    "connectionName": "AzureCosmosDB",
                                    "operationId": "CreateOrUpdateDocument",
                                    "serviceProviderId": "/serviceProviders/AzureCosmosDB"
                                }
                            },
                            "runAfter": {
                                "Send_message": [
                                    "Succeeded"
                                ]
                            }
                        }
                    }
                }
            },
            "Initialize_variable_order": {
                "type": "InitializeVariable",
                "inputs": {
                    "variables": [
                        {
                            "name": "order",
                            "type": "object"
                        }
                    ]
                },
                "runAfter": {}
            }
        },
        "triggers": {
            "manual": {
                "type": "Request",
                "kind": "Http",
                "inputs": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "customerId": {
                                "type": "string"
                            },
                            "orderId": {
                                "type": "string"
                            },
                            "orderItems": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "quantity": {
                                            "type": "integer"
                                        },
                                        "price": {
                                            "type": "number"
                                        },
                                        "status": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "quantity",
                                        "price",
                                        "status"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {}
    },
    "kind": "Stateful"
}