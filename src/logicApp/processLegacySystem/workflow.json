{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Retrieve_all_processed_order": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "databaseId": "contoso",
                        "containerId": "order",
                        "queryText": "SELECT * from c WHERE c.status = 'Completed'"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "AzureCosmosDB",
                        "operationId": "QueryDocuments",
                        "serviceProviderId": "/serviceProviders/AzureCosmosDB"
                    }
                },
                "runAfter": {}
            },
            "Validate_if_orders_found": {
                "type": "If",
                "expression": {
                    "and": [
                        {
                            "greater": [
                                "@body('Retrieve_all_processed_order')?['count']",
                                0
                            ]
                        }
                    ]
                },
                "actions": {
                    "Save_Orders_in_legacy_system": {
                        "type": "Http",
                        "inputs": {
                            "method": "POST",
                            "uri": "@appsetting('legacy_URL')",
                            "headers": {
                                "Content-Type": "application/json",
                                "Ocp-Apim-Subscription-Key": "@appsetting('APIM_subscriptionKey')"
                            },
                            "body": "@body('Retrieve_all_processed_order')?['items']"
                        },
                        "runAfter": {}
                    },
                    "If_POST_legacy_is_success": {
                        "type": "If",
                        "expression": {
                            "and": [
                                {
                                    "equals": [
                                        "",
                                        200
                                    ]
                                }
                            ]
                        },
                        "actions": {
                            "For_each_orders": {
                                "type": "Foreach",
                                "foreach": "@body('Retrieve_all_processed_order')?['items']",
                                "actions": {
                                    "Parse_JSON_order": {
                                        "type": "ParseJson",
                                        "inputs": {
                                            "content": "@item()",
                                            "schema": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "string"
                                                    },
                                                    "orderId": {},
                                                    "status": {
                                                        "type": "string"
                                                    },
                                                    "orderItems": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "quantity": {
                                                                    "type": "integer"
                                                                },
                                                                "price": {
                                                                    "type": "number"
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "quantity",
                                                                "price"
                                                            ]
                                                        }
                                                    },
                                                    "_rid": {
                                                        "type": "string"
                                                    },
                                                    "_self": {
                                                        "type": "string"
                                                    },
                                                    "_etag": {
                                                        "type": "string"
                                                    },
                                                    "_attachments": {
                                                        "type": "string"
                                                    },
                                                    "_ts": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        },
                                        "runAfter": {}
                                    },
                                    "Update_order": {
                                        "type": "ServiceProvider",
                                        "inputs": {
                                            "parameters": {
                                                "databaseId": "contoso",
                                                "containerId": "order",
                                                "item": "{\n   \"id\": @{body('Parse_JSON_order')?['id']},\n   \"status\": @{body('Parse_JSON_order')?['status']},\n   \"orderItems\": @{body('Parse_JSON_orderItems')?['status']},\n   \"sentToLegacy\": true\n}",
                                                "partitionKey": "@body('Parse_JSON_order')?['id']",
                                                "isUpsert": true
                                            },
                                            "serviceProviderConfiguration": {
                                                "connectionName": "AzureCosmosDB",
                                                "operationId": "CreateOrUpdateDocument",
                                                "serviceProviderId": "/serviceProviders/AzureCosmosDB"
                                            }
                                        },
                                        "runAfter": {
                                            "Parse_JSON_order": [
                                                "Succeeded"
                                            ]
                                        }
                                    }
                                },
                                "runAfter": {}
                            }
                        },
                        "runAfter": {
                            "Save_Orders_in_legacy_system": [
                                "Succeeded"
                            ]
                        }
                    }
                },
                "runAfter": {
                    "Initialize_variable": [
                        "Succeeded"
                    ]
                }
            },
            "Initialize_variable": {
                "type": "InitializeVariable",
                "inputs": {
                    "variables": [
                        {
                            "name": "order",
                            "type": "object",
                            "value": {}
                        }
                    ]
                },
                "runAfter": {
                    "Retrieve_all_processed_order": [
                        "Succeeded"
                    ]
                }
            }
        },
        "triggers": {
            "Recurrence": {
                "type": "Recurrence",
                "recurrence": {
                    "frequency": "Hour",
                    "interval": 1
                }
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {}
    },
    "kind": "Stateful"
}